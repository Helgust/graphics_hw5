#version 430

#define GROUP_SIZE 256

layout( local_size_x = GROUP_SIZE ) in;

layout(push_constant ) uniform params {
  uint len;
  uint depth;
} PushConstant;

layout(std430, binding = 0) buffer a 
{
    float A[];
};

layout(std430, binding = 1) buffer Sum
{
    float sum[];
};

layout(std430, binding = 2) buffer Res
{
    float res[];
};

shared float temp_res[GROUP_SIZE];

void main() 
{
    uint idx = gl_GlobalInvocationID.x;
    uint groupID = gl_WorkGroupID.x;
    uint inGroupIDx = gl_LocalInvocationID.x;

    uint blockLength;
    if((groupID + 1) * GROUP_SIZE > PushConstant.len)
    {
        blockLength = PushConstant.len - groupID * GROUP_SIZE;
    }
    else
    {
         blockLength = GROUP_SIZE;
    }

    if (inGroupIDx < blockLength) 
    {
        temp_res[inGroupIDx] = A[idx];
    }
    else
    {
         temp_res[inGroupIDx] = 0;
    } 

    for (uint offset = 1; offset <= GROUP_SIZE/2; offset <<= 1) 
    {
        barrier();
        if ((inGroupIDx + 1) % (offset*2) == 0)
        {
            temp_res[inGroupIDx] += temp_res[inGroupIDx - offset];
        }
            
    }

    barrier();
    if(inGroupIDx == GROUP_SIZE - 1)
    {
        sum[groupID] = temp_res[inGroupIDx];
        temp_res[inGroupIDx] = 0;
    }

    for (uint offset = GROUP_SIZE/2; offset >= 1; offset >>= 1) 
    {
        barrier();
        if ((inGroupIDx + 1) % (offset*2) == 0)
        {
            float temp = temp_res[inGroupIDx];
            temp_res[inGroupIDx] += temp_res[inGroupIDx - offset];
            temp_res[inGroupIDx - offset] = temp;
        }
    }
    if (inGroupIDx < blockLength)
    {
         res[idx] = temp_res[inGroupIDx];
    }
       

}